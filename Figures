%% Make a conditionalPlot of the ratings for all three groups
figure;
for i=1:3 
    x = allratings_g{i}(:,1:end); % remove first 2 trials
    for j=1:size(x,1)
        x(j,:) = tiedrank(x(j,:)) / sum(~isnan(x(j,:))) ;
    end
    %x = x - nanmean(x(:,1:10),2); % subtract off baseline i.e. 1st 10 trials
    errorBarPlot(smoothn(2, x,100),'area',1,'color', colourMap(3,i), 'plotindividuals', 1)
    % remove plotind, 1 to get back to the classic aragement (i,3) 
    hold on
end
hold off
legend({'ON','','OFF','','CTL',''})
title 'Ranked ratings over time'; ylabel('Ranked Ratings')
set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24);

%exportgraphics(gca, 'Ranked without subtracted 10 trials.pdf')

%% p-MB choices div
X = shortTable.grp;
Y = shortTable.pMB;


g = gramm('x', X, 'y', Y, 'color', X);
% Add jittered points to the plot
g.geom_jitter('width', 0.4, 'height', 0); % You can adjust the width for better visualization
% Add summary statistics or glms
g.stat_summary('type', 'sem', 'geom', {'line', 'black_errorbar'});  % CI and mean as a bar and error bar
% Set plot titles and labels with specific font sizes & adapt point size
g.set_title('Probability of Model-Based Choice', 'FontSize', 36);
g.set_names('x', 'Group', 'y', 'Probability', 'color', 'Group');
g.set_point_options('base_size', 10); g.set_line_options('base_size', 5)
g.set_layout_options('legend', 0)

% Draw the plot
figure('Position', [100 100 800 800]); % Creates a figure window
g.draw();
% Adjust position and font size
% Adjust the axes to avoid cutting off labels
% ax = findobj(gcf, 'Type', 'Axes');
% set(ax, 'Position', [0.15 0.15 0.75 0.75]);  % Adjust the position of the axes
set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24);

%% p-MB choices
clear g X Y
X = shortTable.grp;
Y = shortTable.pMF;
g = gramm('x', X, 'y', Y, 'color', X);
% Add jittered points to the plot for better visualization
g.geom_jitter('width', 0.4, 'height', 0);
% Add summary statistics: bars for CI and horizontal line for mean
g.stat_summary('type',  'sem', 'geom', {'line', 'black_errorbar'});  % CI and bars
% Set plot titles and labels
g.set_title('Probability of Model-Free Choice', 'FontSize', 36);
g.set_names('x', 'Group', 'y', 'Probability', 'color', 'Group');
g.set_point_options('base_size', 10); g.set_line_options('base_size', 5)
g.set_layout_options('legend', 0)

% Draw the plot in a new figure window
figure('Position', [100 100 800 600]);
g.draw();
% Optionally, adjust additional text properties if needed after drawing
set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24);

%% P-stay graphs
clear g X Y
X = shortTable.grp;
Y = shortTable.pstay;
g = gramm('x', X, 'y', Y, 'color', X);
% Add jittered points to the plot for better visualization
g.geom_jitter('width', 0.4, 'height', 0);

% Add summary statistics: bars for CI and horizontal line for mean
g.stat_summary('type',  'sem', 'geom', {'line', 'black_errorbar'});  % CI and bars

% Set plot titles and labels
g.set_title('Probability of Repeating s1 Colour', 'FontSize', 36);
g.set_names('x', 'Group', 'y', 'Probability', 'color', 'Group');
g.set_point_options('base_size', 10); g.set_line_options('base_size', 5)
g.set_layout_options('legend', 0)

% Draw the plot in a new figure window
figure('Position', [100 100 800 600]);
g.draw();
% Optionally, adjust additional text properties if needed after drawing
set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24);

%% P-stay graphs
clear g X Y Z
X = shortTable.pMBPOS;
Y = shortTable.pMBNEG;
Z = shortTable.grp;

% Create a gramm object
g = gramm('x', X, 'y', Y, 'color', Z, 'group', Z);

% Add jittered points to the plot for better visualization
g.geom_jitter();
g.stat_glm('geom', 'area', 'fullrange', 1, 'disp_fit', 1);
% Add summary statistics: bars for CI and horizontal line for mean
%g.stat_summary('type',  'ci', 'geom', {'line', 'black_errorbar'});  % CI and bars

% Set plot titles and labels
g.set_title('Positive and negative pMB', 'FontSize', 36);
g.set_names('x', 'positive mb', 'y', 'negative mb', 'color', 'Group');
g.set_point_options('base_size', 10); g.set_line_options('base_size', 5)
% Draw the plot in a new figure window
figure('Position', [100 100 800 600]);
g.draw();
% Optionally, adjust additional text properties if needed after drawing
set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24);

%% Trialwise win * con
clear g X Y Z
X = stayprobTable.group;
Y = stayprobTable.win;
Z = stayprobTable.con;

% Create a gramm object
g = gramm('x', X, 'y', Y, 'color', Z);

% Add jittered points to the plot for better visualization
%g.geom_jitter('width', 0.4, 'height', 0);

% Add summary statistics: bars for CI and horizontal line for mean
g.stat_summary('type',  'sem', 'geom', {'line', 'black_errorbar'});  % CI and bars
g.stat_glm('geom', 'area', 'fullrange', 1, 'disp_fit', 1);

% Set plot titles and labels
g.set_title('Win * Con by Group', 'FontSize', 36);
g.set_names('x', 'Group', 'y', 'Yes / No', 'color', 'Group');

% Draw the plot in a new figure window
figure('Position', [100 100 800 600]);
g.draw();
% Optionally, adjust additional text properties if needed after drawing
set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24);


%% Trialwise win * con
clear g X Y Z
data = stayprobTable;

X = data.woncs;
Y = data.ratings;
Z = data.group;

% Create a gramm object
g = gramm('x', X, 'y', Y, 'color', Z, 'group', Z);

% Add jittered points to the plot for better visualization
%g.geom_bar();
g.stat_glm('geom', 'area', 'fullrange', 1, 'disp_fit', 1);
% Add summary statistics: bars for CI and horizontal line for mean
g.stat_summary('type',  'mean', 'geom', {'bar'});  % CI and bars

% Set plot titles and labels
g.set_title('Ratings by shape and group', 'FontSize', 36);
g.set_names('x', 'Win(1) or Nonwin(0)', 'y', 'Ratings', 'color', 'Shape');

% Draw the plot in a new figure window
figure('Position', [100 100 800 600]);
g.draw();
% Optionally, adjust additional text properties if needed after drawing
set(findall(gcf, '-property', 'FontSize'), 'FontSize', 24);
