clear 
% Set options
optimize = 0; % Set if you wish to optimize free parameters
GeneratePlots = 0; %If you want to generate figures
GenerateSurrData = 0; %Do you want to generate surrogate data?
plotDawGraphs = 1;
fitregression = 0;
%% Extracting variables from Gorilla files
filenames= { 
{
'PD101_OFF.mat', 'PD102_OFF.mat', 'PD103_OFF.mat', 'PD104_OFF.mat'...
'PD105_OFF.mat','PD106_OFF.mat','PD107_OFF.mat','PD108_OFF.mat','PD110_OFF.mat'...
'PD111_OFF.mat', 'PD112_OFF.mat', 'PD113_OFF.mat', 'PD114_OFF.mat'...
'PD115_OFF.mat','PD116_OFF.mat','PD117_OFF.mat','PD119_OFF.mat','PD120_OFF.mat'...
}
{
'PD101_ON.mat', 'PD102_ON.mat', 'PD103_ON.mat', 'PD104_ON.mat'...
'PD105_ON.mat','PD106_ON.mat','PD107_ON.mat','PD108_ON.mat','PD110_ON.mat'...
'PD111_ON.mat', 'PD112_ON.mat', 'PD113_ON.mat', 'PD114_ON.mat'...
'PD115_ON.mat','PD116_ON.mat','PD117_ON.mat','PD119_ON.mat','PD120_ON.mat'...
}
{
'C101.mat', 'C102.mat', 'C103.mat', 'C104.mat', 'C105.mat', 'C106.mat', 'C107.mat', ...
'C108.mat', 'C109.mat', 'C110.mat', 'C111.mat', 'C112.mat', 'C113.mat', 'C114.mat',...
'C115.mat', 'C116.mat', 'C117.mat', 'C118.mat', 'C119.mat'...
}
{
'HC101.mat', 'HC102.mat', 'HC103.mat', 'HC104.mat', 'HC105.mat', 'HC106.mat', 'HC107.mat', ...
'HC108.mat', 'HC109.mat', 'HC110.mat', 'HC111.mat', 'HC112.mat', 'HC113.mat', 'HC114.mat',...
'HC115.mat', 'HC116.mat', 'HC117.mat', 'HC118.mat', 'HC119.mat', 'HC120.mat', 'HC121.mat', ...
'HC122.mat', 'HC123.mat', 'HC124.mat', 'HC124.mat', 'HC125.mat', 'HC126.mat', 'HC127.mat', ...
'HC128.mat', 'HC129.mat'...
}
};
% 
% stayprobTable = table(); 
% FullDiffratTable = table(); 
% allRatchangeTable = table(); 
% stayprobTable2 = table();

for group = 1:4 %1:numel(filenames)
    GroupData = []; allratings = []; figure; %initialize structures and figures 
    for i = 1:length(filenames{group, 1}) % for the number of cells in filenames
        filename = filenames{group}{i}; %extract the filename corresponding to the current subject
        result = load(filename); %load the datafile

        if group == 1; Med = 0; Dis = 0; %set PDoff to default group
        elseif group == 2; Med = 1; Dis = 0; % set PDon to med = 1, dis = 0 to measure effects of emd
        elseif group ==3; Med = 0; Dis = 1; % set controls to disease = 1 to measure effects of disease
        end
        subjectData.Med = Med;
        subjectData.Dis = Dis;
        % Extract variables for the current subject
        subjectData.group = group;
        subjectData.ID = i;
        if group == 3; subjectData.ID = i+18; end
        subjectData.A = [result.data.colour_s1, result.data.response_s2]; %action at s1 and s2
        subjectData.Ashape = result.data.chosen_id_s1 + 1; % which s1 shape was chosen
        subjectData.R = [result.data.reward]; % did they get a reward
        subjectData.S = [ones(size(result.data.s2_state)), result.data.s2_state]; %state at s1 and s2
        subjectData.shapeIdx = [ floor(result.data.irrels/10), mod(result.data.irrels,10) ];
        
        subjectData.Nch = length(result.data.s3_shape);%number of trials
        subjectData.ratingIdx = [result.data.s3_shape]; %which shape was presented for rating (1-5)?
        subjectData.trans = [result.data.isConsistentMapping]; %consistent trial?
        subjectData.startTransferChoice = result.data.t_start_s3'; %time rating shape presented
        subjectData.endTransferChoice = result.data.t_response_s3'; %time rating response submitted
        subjectData.start = result.data.t_start_s1'; %s1 time of presentation
        subjectData.finish = result.data.t_response_s1'; %response time on s1
        subjectData.correct = result.data.correct'; % was the s1 choice correct? Ie would it lead to reward on common trial? 
        subjectData.LRchoice = result.data.location_s1; % was the chosen s1 colour left or right?
        subjectData.high_value_shape = [result.data.high_value_shape]; %which shape had the high value
 
        %make reward probability matrix based on high value shape
        rewprobValue = 0.2; rewprobArray = zeros(2, 2, 50);
        for k = 1:subjectData.Nch
            highValueIndex = subjectData.high_value_shape(k);
            rewprobArray(:, :, k) = rewprobValue; % Set all values to 0.2
            if highValueIndex == 1; rewprobArray(1, 1, k) = 0.8;
            elseif highValueIndex == 2; rewprobArray(1, 2, k) = 0.8;
            elseif highValueIndex == 3; rewprobArray(2, 1, k) = 0.8;
            else; rewprobArray(2, 2, k) = 0.8;
            end

        end
        subjectData.rewprob = rewprobArray;       
        subjectData.Performance = sum(subjectData.correct)/subjectData.Nch;
        % subplot(4,5,i); % just checking the distribution of L/R red/blue choices in subjects
        % histogram(subjectData.A(:,1));

        x = tiedrank(result.data.rating_Coord)';% tiedrank the ratings to eliminate subject-specific ranges
        subjectData.zRating = x; %- nanmean(x(:,1:10),2) % remove the mean of the 1st 10 trials from the tiedranks
        if result.data.nl_orientation == 1 
            subjectData.Rating = (result.data.rating_Coord - 230)';
        else subjectData.Rating = (result.data.rating_Coord - 750)';
        end
        subjectData.Rating(subjectData.Rating < 0) = NaN;

        clear RatchangeTable % clear table to get only this subject's data
       [diffratings, ratingschange_chosens, last_select_distance, last_rated_distance, ...
           wons, consis,RatchangeTable] = ratingschange_simple(subjectData);
       subjectData.ratingschange_chosens = ratingschange_chosens';
       subjectData.ratingschange = diffratings'; % current shape previously rated - current trial rating
       subjectData.lsd = last_select_distance;
       subjectData.lrd = last_rated_distance';
       % subjectData.prevRating = diffratings1';
       % subjectData.currRating = diffratings2';
       allRatchangeTable = [allRatchangeTable; RatchangeTable]; % accumulate ratingschange for all subjects in group
    
       % PD Graphing
        [pMB, pMF, pwin, barv, baraa, MBMFD, subjectTable, normratings, pMTbA, pMFbA, pMBTPOSA, pMBNEG, ...
        RTTP, baraRT, baraaq] = PDGraphingTR_wf(subjectData, i, group);

        % Make 
        SubjectData.pMB = pMB;
        SubjectData.pMF = pMF;
        SubjectData.pMTbA = pMTbA;
        SubjectData.pMFbA = pMFbA;
        stayprobTable = [stayprobTable; subjectTable];
        GroupData = [GroupData;subjectData];


        subjectRatings = subjectData.Rating;
        allratings = [allratings; subjectRatings];
        clear subjectRatings
        allbarv(i,:)=barv;
        allbaraa(i,:)= baraa; %win/common split of shape ratings, chosen not re-seen
    end
    save([getGroupLabel(group) ".mat"], "GroupData")
    
    stayprobTable2 = [stayprobTable2; stayprobTable]
    % consolidate/organize the extracted data for each group
    allratings_g{group} = allratings;
    Performance_g{group} = GroupData.Performance

    if plotDawGraphs == 1
      graphTypes = ["Classic Daw", "Ratings Daw"];
        for idx = 1:length(graphTypes)
            figure;   
            if idx == 1
                data = allbarv;
                ylabel('Stay Probability');
                ylim([0.5 0.9]);
            else
                data = allbaraa;
                ylabel('Tiedranked Ratings');
                ylim([0, 150]);
            end
            if group == 1:2
                data(15,:) = nan;
            else data(7,:) = nan;
            end
            errbar = nanstd(data) ./ sqrt(sum(~isnan(data)));
            x = 1:4;
            barWidth = 0.4;
            hold on;
            bar(x([1, 3]), nanmean(data(:,[1, 3])), barWidth, 'FaceColor', 'red');
            bar(x([2, 4]), nanmean(data(:,[2, 4])), barWidth, 'FaceColor', 'blue');
            er = errorbar(x, nanmean(data), errbar, -errbar);
            er.Color = [0 0 0]; er.LineStyle = 'none';
            xlim([0.5, 4.5]); xticks(x);
            xLabels = ["Win/Common", "Win/Rare", "Loss/Common", "Loss/Rare"];
            xticklabels(xLabels);
            title([graphTypes(idx) ' Graph ' getGroupLabel(group)]);
            hold off
        end
    else; continue; end
    
    % Fit hybrid learning model
    if optimize == 1
        fit = fitWrapper(GroupData, 'LLmodelRating', 1, 1);
    else 
        fitall = load('/Users/klarahatinova/Documents/MBDM_2023/Saved_variables/fittedParamCell.mat');
        fit = fitall.ans{group,1}; clear fitall;
    end
    
    % Calculate the bound parameters
    fit.results.boundparam(:, [1,5]) = exp(fit.results.paramfit(:, [1,5]));
    fit.results.boundparam(:, [2,3,4]) = 1./(1+exp(-fit.results.paramfit(:,[2,3,4])));
    
    % Generate surrogate data
    if GenerateSurrData == 1
        SurrogateData = generateSurrData_K(GroupData,fit.results.paramfit,'LLmodelRating_K');  
    else 
        SurrData = load('/Users/klarahatinova/Documents/MBDM_2023/Saved_variables/SurrData.mat');
        SurrogateData = SurrData.SurrData{group};
    end
    
    rpeData = [];
    for subject = 1:length(GroupData)
        y = [fit.results.paramfit(subject, :)];
        [LL, RPEs] = LLmodelRating_extraction(y, GroupData, subject);
        rpeData(subject).subject = RPEs;
    end

    % if GeneratePlots == 1
    %     conditionalPlot(SurrogateData(1).subject(1).RPE1(10:end,:),diffratings');
    % else; continue; end

 if fitregression == 1
    R = filenames{group};                                                                                                                                                                                     
    regression = fitRegression_K(rpeData, R, group);
    [SurrogateRegression, SurrRPEmatrix] = fitRegression_dsurr(SurrogateData, R, group);
    % if GeneratePlots == 1;figure;
    %     scatter(last_chosen_distance, diffratings, "filled"); ylabel('Ratings Change'); xlabel('Last Chosen Distance')
    %     title(['Ratingschange as a function of last chosen distance for Subject ', num2str(sub)])
    % end
    
    figure; 
    for subject = 1:length(GroupData)
        RC(:,subject) = GroupData(subject).ratingschange_chosens(:);
        RPE2(:,subject) = rpeData(subject).subject.RPE2(:);
        RPE5(:,subject) = rpeData(subject).subject.RPE5(:);
        RPE6(:,subject) = rpeData(subject).subject.RPE6(:);
        RPE4(:,subject) = rpeData(subject).subject.RPE4(:);
        
        
        % sRPE1(:,subject) = SurrRPEmatrix{1, subject}(:,1);
        % sRPE2(:,subject) = SurrRPEmatrix{1, subject}(:,2);
        % sRPE3(:,subject) = SurrRPEmatrix{1, subject}(:,3);
        % sRPE4(:,subject) = SurrRPEmatrix{1, subject}(:,4);
        % sRPE5(:,subject) = SurrRPEmatrix{1, subject}(:,5);
        
        subplot(4,5,subject)
        [Xb,Yb, p,t, h, resid] = conditionalPlot(RPE4(:,subject), RC(:,subject));
        title(['RPE4 for Subject ' num2str(subject), ' ',getGroupLabel(group)])
        hold on;
        line(0, 0, 'Color', 'k', 'LineStyle', '--');
        hold off;

    end

    %make conditional plots
    RPEs = {RPE2, RPE4, RPE6, RPE5};
    plotConditionalSubplots(RPEs, RC, group);
    
    if GenerateSurrData == 1
    sRPEs = {sRPE1, sRPE2, sRPE3, sRPE4, sRPE5};
    plotConditionalSubplots(sRPEs, RC, group);
    else; continue; end
   
 end
end

%% Graphs from initial GraphingScriptPDTR
figure;
for i=1:3
    x = allratings_g{i}(:,10:end); % remove first 2 trials
    % for j=1:size(x,1)
    %     x(j,:) = tiedrank(x(j,:)) / sum(~isnan(x(j,:))) ;
    % end
   % x = x - nanmean(x(:,1:10),2); % subtract off baseline i.e. 1st 10 trials
    errorBarPlot(smoothn(2, x,100),'area',1,'color',colourMap(3,i), 'plotindividuals', 1)
    % remove plotind, 1 to get back to the classic aragement (i,3) 
    hold on
end

hold off
legend({'OFF','','ON','','CTL',''})
title 'Ranked ratings over time'

figure;
for i = 1:3
    x = nanmean(Performance_g{1,i});
    sem = nanstd(Performance_g{1,i}) / sqrt(sum(~isnan(Performance_g{1,i})));  % Calculate SEM
    
    hold on
    bar(i, x, 'FaceColor', colourMap(3, i));
    errorbar(i, x, sem, 'k', 'LineWidth', 1.5);  % Add error bars in black
end

hold off

% Add labels and title
xlabel('Group')
ylabel('Mean Performance');
legend({'PD off', 'PD on', 'Controls'});
title('Mean Correct s2 Choices');
