%% Extracting variables from Gorilla files
filenames= { 
{
'PD101_OFF.mat', 'PD102_OFF.mat', 'PD103_OFF.mat', 'PD104_OFF.mat'...
'PD105_OFF.mat','PD106_OFF.mat','PD107_OFF.mat','PD108_OFF.mat','PD110_OFF.mat'...
'PD111_OFF.mat', 'PD112_OFF.mat', 'PD113_OFF.mat', 'PD114_OFF.mat'...
'PD115_OFF.mat','PD116_OFF.mat','PD117_OFF.mat','PD119_OFF.mat','PD120_OFF.mat'...
}
{
'PD101_ON.mat', 'PD102_ON.mat', 'PD103_ON.mat', 'PD104_ON.mat'...
'PD105_ON.mat','PD106_ON.mat','PD107_ON.mat','PD108_ON.mat','PD110_ON.mat'...
'PD111_ON.mat', 'PD112_ON.mat', 'PD113_ON.mat', 'PD114_ON.mat'...
'PD115_ON.mat','PD116_ON.mat','PD117_ON.mat','PD119_ON.mat','PD120_ON.mat'...
}
{
'C101.mat', 'C102.mat', 'C103.mat', 'C104.mat', 'C105.mat', 'C106.mat', 'C107.mat', ...
'C108.mat', 'C109.mat', 'C110.mat', 'C111.mat', 'C112.mat', 'C113.mat', 'C114.mat',...
'C115.mat', 'C116.mat', 'C117.mat', 'C118.mat' 'C119.mat'...
}
};
% initialize the combined group tables for a) trial-wise data (stick models) and b) single line per subject short table
stayprobTable = table; HCstayprobTable = table; HCGroupData = []; shortTable = []; clear subjectData

for group = 1:3
    GroupData = []; allratings = []; %figure %(for ratinsgchange subplot); %initialize structures and figures 
    for i = 1:length(filenames{group, 1}) % for the number of cells in filenames
        filename = filenames{group}{i}; %extract the filename corresponding to the current subject & group
        if group == 1 || group == 2 || group == 3
            result = load(filename); %load the datafile
        elseif group == 4
            result = load('Fit_implicit21.mat');
            subjectData = result.fit_implicit_21.RealData(i);
        elseif group == 5
            result = load('Fit_explicit28.mat');
            subjectData = result.fit_explicit_28.RealData(i);
        end
        
        if group == 1
            Med = 0; Dis = 1; 
            DemographicData = load("PDDemographicData.mat"); %set PDoff to default group
            subjectData.AMI = table2array(DemographicData.data(i,"AMITotal"));
            subjectData.HADS = table2array(DemographicData.data(i,"HADSTotal"));
            subjectData.UPDRST = table2array(DemographicData.data(i, "UPDRSTotal"));
            subjectData.Grit = table2array(DemographicData.data(i,"GritTotal")); 
            subjectData.Impulsivity = table2array(DemographicData.data(i,"SUPPSP"));
            subjectData.Age = table2array(DemographicData.data(i, "Age"));
            subjectData.Sex = table2array(DemographicData.data(i,"Sex"));
            if i < 10; subjectData.LearningEffect = 1; % for these participants, this session was the 2nd visit
            else; subjectData.LearningEffect = 0; % for these participants, this session was the first
            end
        elseif group == 2
            Med = 1; Dis = 1; % set PDon to med = 1, dis = 1 to measure effects of medication
            DemographicData = load("PDDemographicData.mat");
            subjectData.AMI = table2array(DemographicData.data(i,"AMITotal"));
            subjectData.HADS = table2array(DemographicData.data(i,"HADSTotal"));
            subjectData.UPDRST = table2array(DemographicData.data(i, "UPDRSTotal"));
            subjectData.Grit = table2array(DemographicData.data(i,"GritTotal")); 
            subjectData.Impulsivity = table2array(DemographicData.data(i,"SUPPSP"));
            subjectData.Age = table2array(DemographicData.data(i, "Age"));
            subjectData.Sex = table2array(DemographicData.data(i,"Sex"));
            if i >= 10; subjectData.LearningEffect = 0; % for these participants, this session was the first
            else subjectData.LearningEffect = 1; % for these participants, this session was the 2nd visit
            end
        elseif group == 3; Med = 0; Dis = 0; %set PDoff to default group = 0 and med = 0
            subjectData.LearningEffect = nan; % no learning effect, as they only did one session
            DemographicData = load("HCDemographicData.mat"); 
            subjectData.AMI = table2array(DemographicData.data(i,"AMITotal"));
            subjectData.HADS = table2array(DemographicData.data(i,"HADSTotal")); 
            subjectData.UPDRST = NaN;
            subjectData.Grit = table2array(DemographicData.data(i,"GritTotal")); 
            subjectData.Impulsivity = table2array(DemographicData.data(i,"SUPPSP")); 
            subjectData.Age = table2array(DemographicData.data(i, "Age"));
            subjectData.Sex = table2array(DemographicData.data(i,"Sex"));
        end
        ami = subjectData.AMI; hads = subjectData.HADS; updrst = subjectData.UPDRST; age = subjectData.Age;
        grit = subjectData.Grit; impulsivity = subjectData.Impulsivity;
        subjectData.Med = Med;
        subjectData.Dis = Dis;
        % Extract variables for the current subject
        subjectData.group = group;
        subjectData.ID = i; % set subject ID to the current loop number
       
        if group == 3; subjectData.ID = i+18; 
        end

            subjectData.A = [result.data.colour_s1, result.data.response_s2]; 
            %action at s1 (red = 1, blue = 2) and shape at s2 (1-4)
            subjectData.Ashape = [result.data.response_s1]; % which s1 shape was chosen (1-5)
            subjectData.R = [result.data.reward]; % did they get a reward
            subjectData.S = [ones(size(result.data.s2_state)), result.data.s2_state]; 
            %state at s1 (always 1) and s2 (state 1 = shapes 1/2, state 2 = shapes 3/4)
            subjectData.shapeIdx = [ floor(result.data.irrels/10), mod(result.data.irrels,10) ]; 
            % what shapes were presented at stage 1 (red | blue)
            
            subjectData.Nch = length(result.data.s3_shape); %number of trials
            subjectData.ratingIdx = [result.data.s3_shape]; %which shape was presented for rating (1-5)?
            subjectData.trans = [result.data.isConsistentMapping]; %common trial (0 = no, 1 = yes)
            subjectData.startTransferChoice = [result.data.t_start_s3]'; %time rating shape presented
            subjectData.endTransferChoice = [result.data.t_response_s3]'; %time rating response submitted
            subjectData.start = [result.data.t_start_s1]'; %s1 time of presentation
            subjectData.finish = [result.data.t_response_s1]'; %response time on s1
            subjectData.correct = [result.data.correct]'; % was the s1 choice correct (s2 shape == high value shape)?
            subjectData.LRchoice = [result.data.location_s1]; % was the chosen s1 colour left or right?
            subjectData.high_value_shape = [result.data.high_value_shape]; %which shape had the high value
     
            %make reward probability matrix for s2 shapes based on high value shape (p(r) = 0.8)
            rewprobValue = 0.2; rewprobArray = zeros(2, 2, 50);
            for k = 1:subjectData.Nch
                highValueIndex = subjectData.high_value_shape(k);
                rewprobArray(:, :, k) = rewprobValue; % Set all values to 0.2
                if highValueIndex == 1; rewprobArray(1, 1, k) = 0.8;
                elseif highValueIndex == 2; rewprobArray(1, 2, k) = 0.8;
                elseif highValueIndex == 3; rewprobArray(2, 1, k) = 0.8;
                else; rewprobArray(2, 2, k) = 0.8;
                end
    
            end
            subjectData.rewprob = rewprobArray;       
            subjectData.Performance = sum(subjectData.R)/subjectData.Nch; % measure performance
            subjectData.ScreenSize = result.data.ParticipantViewportSize;
    
            vert_range = 349; hor_range = 429;
            subjectData.nl_orientation = result.data.nl_orientation; nl = subjectData.nl_orientation(1); % what orientation was the number line? (1 = vert, 0 = horizontal)
            if subjectData.nl_orientation == 1 % if vertical
                if subjectData.ScreenSize(1) == "1920x937"
                    subjectData.Rating = (937 - result.data.rating_Coord)./937;
                elseif subjectData.ScreenSize(1) == "1920x969"
                    subjectData.Rating = (969 - result.data.rating_Coord)./969;
                end
                subjectData.Rating(isnan(subjectData.ratingIdx)) = NaN; 
                subjectData.zRating = tiedrank(subjectData.Rating);
            
            elseif subjectData.nl_orientation == 0 
                subjectData.Rating = (result.data.rating_Coord / 1920);
                subjectData.Rating(isnan(subjectData.ratingIdx)) = NaN;
                %sr = subjectData.Rating - hor_range;  
                subjectData.zRating = tiedrank(subjectData.Rating); %normalize(sr, 'center', 'mean');
            end

           [var, subjectTable, ratingschange_chosens] = PDGraphingTR_K(subjectData, group);
           % PD Graphing - calculates model-based and model-free behaviour for
           % a) choices 
           % b) ratings
           % c) makes a trialwise table (subjectTable) that has stick probability trial 2:end, based on 
           % consistency, reward, correct, trial + subject ID
       
            % Add the Graphing variables to subjectData
            subjectData.pMB = var.pMB;
            subjectData.pMF = var.pMF;
            subjectData.pMTbA = var.pMTbA; % model based value transfer (based on last choice of current rated shape win/common)
            subjectData.pMFbA = var.pMFbA; % model free value transfer (based on last choice of current rated shape win/common)
            subjectData.ratingschange_chosens = ratingschange_chosens;
    
            stayprobTable = [stayprobTable; subjectTable];
            clear subjectTable
            GroupData = [GroupData;subjectData];
            subjectRatings = subjectData.zRating';
            allratings = [allratings; subjectRatings];
           
            allbarv(i,:)=var.barv; % barv is the winc/common split of choices
            allbaraa(i,:)= var.baraa; %win/common split of shape ratings, chosen not re-seen
            
            allpMB(i,:)=var.pMB; % accumulare pMB from all subjects
            allpMF(i,:)= var.pMF; % accumulate pMF from all subjects
    
        vars = struct2table(var, 'AsArray', 1);
        grp = {getGroupLabel(group)};
        pcorrect = nanmean(subjectData.correct);
        s = table(i, grp, Med, Dis, nl, age, ami, grit, impulsivity, updrst, hads, pcorrect);
        ss = [s, vars];
      
        shortTable = [shortTable; ss];
    
    end % Exits the subject-specific loop
    
    % Save each group's data into a separate file
    saveFileName = sprintf("groupData_group%d.mat", group); clear save
    save(saveFileName, "GroupData");
    
    allratings_g{group} = allratings;
end 
% exits the group loop   

% Adds the probability of staying to the shortTable
for s = 1:height(shortTable)
    shortTable.pstay(s) = sum(shortTable.stick{s,1}, 'omitmissing');
    if shortTable.Dis == 0
        shortTable.i = shortTable.i + 18;
    end
end
saveFileName= sprintf("shortTable1");
save(saveFileName, "shortTable");

saveFileName= sprintf("stayprobTable");
save(saveFileName, "stayprobTable");

saveFileName= sprintf("allratings_g");
save(saveFileName, "allratings_g");
